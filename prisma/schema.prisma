generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  username              String                 @unique
  email                 String                 @unique
  passwordHash          String
  role                  String
  sport                 String?
  name                  String?
  dob                   DateTime?
  gender                String?
  mobile                String?
  profilePic            String?
  height                Int?
  weight                Int?
  bloodgroup            String?
  address               String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  // Relations
  achievements          Achievement[]
  createdTournaments    Tournament[]           @relation("AdminTournaments")
  reviewedTournaments   Tournament[]           @relation("OfficialReviews")
  publishedTournaments  Tournament[]           @relation("AdminPublished")
  registrations         TournamentRegistration[]
  schedules             Schedule[]
  scheduleRequests      ScheduleRequest[]
  onboardingDocs        OnboardingDoc[]
}

model OnboardingDoc {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  forRole     String   // Coach | Admin | Government Official
  fileName    String
  mimeType    String
  size        Int?
  url         String
  status      String   @default("SUBMITTED")
  uploadedAt  DateTime @default(now())
}

model Achievement {
  id              String   @id @default(cuid())
  title           String
  date            DateTime
  description     String?
  proof           String?
  sport           String
  venue           String
  status          String   @default("PENDING")
  decisionReason  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ownerId         String
  owner           User     @relation(fields: [ownerId], references: [id])

  verifiedById    String?
  verifiedByName  String?
  verifiedAt      DateTime?
}

model Tournament {
  id                String   @id @default(cuid())
  name              String
  sport             String
  startDateTime     DateTime
  endDateTime       DateTime
  state             String
  district          String
  venue             String
  description       String?
  needsApproval     Boolean  @default(true)
  status            String   @default("DRAFT")

  createdBy         String
  creator           User     @relation("AdminTournaments", fields: [createdBy], references: [id])

  reviewedBy        String?
  reviewer          User?    @relation("OfficialReviews", fields: [reviewedBy], references: [id])
  reviewNote        String?
  reviewedAt        DateTime?

  publishedBy       String?
  publisher         User?    @relation("AdminPublished", fields: [publishedBy], references: [id])
  publishedAt       DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  registrations     TournamentRegistration[]
}

model TournamentRegistration {
  id            String   @id @default(cuid())
  tournamentId  String
  playerId      String
  regStatus     String   @default("PENDING")
  registeredAt  DateTime @default(now())

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  player     User       @relation(fields: [playerId], references: [id])

  @@unique([tournamentId, playerId])
}

model Schedule {
  id          String   @id @default(cuid())
  coachId     String
  sport       String
  date        DateTime
  startTime   String
  endTime     String?
  venue       String
  entrance    String
  createdAt   DateTime @default(now())

  coach       User     @relation(fields: [coachId], references: [id])
  requests    ScheduleRequest[]
}

model ScheduleRequest {
  id          String   @id @default(cuid())
  scheduleId  String
  playerId    String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  schedule    Schedule @relation(fields: [scheduleId], references: [id])
  player      User     @relation(fields: [playerId], references: [id])

  @@unique([scheduleId, playerId])
}